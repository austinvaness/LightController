// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
//   Input: dmxProfiles.proto
// </auto-generated>

#region Designer generated code

namespace rv.data
{

    [global::ProtoBuf.ProtoContract()]
    public partial class DMXProfiles : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1)]
        public DMXProfile workspaceProfile { get; set; }

        [global::ProtoBuf.ProtoMember(2)]
        public global::System.Collections.Generic.List<DMXProfile> layerProfiles { get; } = new global::System.Collections.Generic.List<DMXProfile>();

        [global::ProtoBuf.ProtoContract()]
        public partial class DMXProfile : global::ProtoBuf.IExtensible
        {
            private global::ProtoBuf.IExtension __pbn__extensionData;
            global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

            [global::ProtoBuf.ProtoMember(1)]
            public Profile profile { get; set; }

            [global::ProtoBuf.ProtoMember(2)]
            public Fixture fixture { get; set; }

            [global::ProtoBuf.ProtoMember(3)]
            public bool isEnabled { get; set; }

            [global::ProtoBuf.ProtoMember(4)]
            public global::System.Collections.Generic.List<ChannelMapping> customMappings { get; } = new global::System.Collections.Generic.List<ChannelMapping>();

            [global::ProtoBuf.ProtoContract()]
            public partial class Profile : global::ProtoBuf.IExtensible
            {
                private global::ProtoBuf.IExtension __pbn__extensionData;
                global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                    => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                [global::ProtoBuf.ProtoMember(1)]
                public ProfileType profileType { get; set; }

                [global::ProtoBuf.ProtoMember(2)]
                public uint startingChannel { get; set; }

                [global::ProtoBuf.ProtoContract()]
                public enum ProfileType
                {
                    [global::ProtoBuf.ProtoEnum(Name = @"BASIC")]
                    Basic = 0,
                    [global::ProtoBuf.ProtoEnum(Name = @"ADVANCED")]
                    Advanced = 1,
                    [global::ProtoBuf.ProtoEnum(Name = @"CUSTOM")]
                    Custom = 2,
                }

            }

            [global::ProtoBuf.ProtoContract()]
            public partial class ChannelMapping : global::ProtoBuf.IExtensible
            {
                private global::ProtoBuf.IExtension __pbn__extensionData;
                global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                    => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                [global::ProtoBuf.ProtoMember(1)]
                public uint channelIndex { get; set; }

                [global::ProtoBuf.ProtoMember(2, Name = @"command")]
                public CommandType Command { get; set; }

                [global::ProtoBuf.ProtoContract()]
                public enum CommandType
                {
                    [global::ProtoBuf.ProtoEnum(Name = @"OPACITY")]
                    Opacity = 0,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE")]
                    BlendMode = 1,
                    [global::ProtoBuf.ProtoEnum(Name = @"SELECT_CUE")]
                    SelectCue = 2,
                    [global::ProtoBuf.ProtoEnum(Name = @"CONTROL_TYPE")]
                    ControlType = 3,
                    [global::ProtoBuf.ProtoEnum(Name = @"CONTROL_VALUE")]
                    ControlValue = 4,
                    [global::ProtoBuf.ProtoEnum(Name = @"TRANSITION_DURATION")]
                    TransitionDuration = 5,
                    [global::ProtoBuf.ProtoEnum(Name = @"SELECT_PLAYLIST")]
                    SelectPlaylist = 6,
                    [global::ProtoBuf.ProtoEnum(Name = @"TARGETED_LAYER")]
                    TargetedLayer = 7,
                }

            }

            [global::ProtoBuf.ProtoContract()]
            public partial class Fixture : global::ProtoBuf.IExtensible
            {
                private global::ProtoBuf.IExtension __pbn__extensionData;
                global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                    => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                [global::ProtoBuf.ProtoMember(1)]
                public FixtureType fixtureType { get; set; }

                [global::ProtoBuf.ProtoMember(2)]
                public uint layerIndex { get; set; }

                [global::ProtoBuf.ProtoContract()]
                public enum FixtureType
                {
                    [global::ProtoBuf.ProtoEnum(Name = @"WORKSPACE")]
                    Workspace = 0,
                    [global::ProtoBuf.ProtoEnum(Name = @"LAYER")]
                    Layer = 1,
                }

            }

        }

    }

}


#endregion
