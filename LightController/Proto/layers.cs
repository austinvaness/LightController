// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
//   Input: layers.proto
// </auto-generated>

#region Designer generated code

namespace rv.data
{

    [global::ProtoBuf.ProtoContract()]
    public partial class Layer : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"uuid")]
        public Uuid Uuid { get; set; }

        [global::ProtoBuf.ProtoMember(2, Name = @"name")]
        [global::System.ComponentModel.DefaultValue("")]
        public string Name { get; set; } = "";

        [global::ProtoBuf.ProtoMember(3, Name = @"color")]
        public Color Color { get; set; }

        [global::ProtoBuf.ProtoMember(4, Name = @"muted")]
        public bool Muted { get; set; }

        [global::ProtoBuf.ProtoMember(5, Name = @"hidden")]
        public bool Hidden { get; set; }

        [global::ProtoBuf.ProtoMember(6)]
        public BlendMode blend_mode { get; set; }

        [global::ProtoBuf.ProtoMember(7, Name = @"opacity")]
        public double Opacity { get; set; }

        [global::ProtoBuf.ProtoMember(8, Name = @"selected_target_set_uuid")]
        public Uuid SelectedTargetSetUuid { get; set; }

        [global::ProtoBuf.ProtoMember(9, Name = @"effects_preset_uuid")]
        public Uuid EffectsPresetUuid { get; set; }

        [global::ProtoBuf.ProtoMember(10, Name = @"effects_build_duration")]
        public double EffectsBuildDuration { get; set; }

        [global::ProtoBuf.ProtoMember(11, Name = @"layer_preset_uuid")]
        public Uuid LayerPresetUuid { get; set; }

        [global::ProtoBuf.ProtoMember(12, Name = @"hot_key")]
        public HotKey HotKey { get; set; }

        [global::ProtoBuf.ProtoMember(13, Name = @"transition")]
        public Transition Transition { get; set; }

        [global::ProtoBuf.ProtoMember(14, Name = @"effects")]
        public global::System.Collections.Generic.List<Effect> Effects { get; } = new global::System.Collections.Generic.List<Effect>();

        [global::ProtoBuf.ProtoMember(15, Name = @"blend")]
        public Blending Blend { get; set; }

        [global::ProtoBuf.ProtoContract()]
        public partial class Preset : global::ProtoBuf.IExtensible
        {
            private global::ProtoBuf.IExtension __pbn__extensionData;
            global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

            [global::ProtoBuf.ProtoMember(1, Name = @"uuid")]
            public Uuid Uuid { get; set; }

            [global::ProtoBuf.ProtoMember(2, Name = @"name")]
            [global::System.ComponentModel.DefaultValue("")]
            public string Name { get; set; } = "";

            [global::ProtoBuf.ProtoMember(3, Name = @"layer")]
            public Layer Layer { get; set; }

        }

        [global::ProtoBuf.ProtoContract()]
        public partial class Blending : global::ProtoBuf.IExtensible
        {
            private global::ProtoBuf.IExtension __pbn__extensionData;
            global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

            [global::ProtoBuf.ProtoMember(1)]
            public Standard standard
            {
                get => __pbn__BlendingType.Is(1) ? ((Standard)__pbn__BlendingType.Object) : default;
                set => __pbn__BlendingType = new global::ProtoBuf.DiscriminatedUnionObject(1, value);
            }
            public bool ShouldSerializestandard() => __pbn__BlendingType.Is(1);
            public void Resetstandard() => global::ProtoBuf.DiscriminatedUnionObject.Reset(ref __pbn__BlendingType, 1);

            private global::ProtoBuf.DiscriminatedUnionObject __pbn__BlendingType;

            [global::ProtoBuf.ProtoMember(2)]
            public Matte matte
            {
                get => __pbn__BlendingType.Is(2) ? ((Matte)__pbn__BlendingType.Object) : default;
                set => __pbn__BlendingType = new global::ProtoBuf.DiscriminatedUnionObject(2, value);
            }
            public bool ShouldSerializematte() => __pbn__BlendingType.Is(2);
            public void Resetmatte() => global::ProtoBuf.DiscriminatedUnionObject.Reset(ref __pbn__BlendingType, 2);

            [global::ProtoBuf.ProtoContract()]
            public partial class Standard : global::ProtoBuf.IExtensible
            {
                private global::ProtoBuf.IExtension __pbn__extensionData;
                global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                    => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                [global::ProtoBuf.ProtoMember(1, Name = @"mode")]
                public BlendMode Mode { get; set; }

                [global::ProtoBuf.ProtoMember(2, Name = @"opacity")]
                public double Opacity { get; set; }

                [global::ProtoBuf.ProtoContract()]
                public enum BlendMode
                {
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_NORMAL")]
                    BlendModeNormal = 0,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DISSOLVE")]
                    BlendModeDissolve = 1,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DARKEN")]
                    BlendModeDarken = 2,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_MULTIPLY")]
                    BlendModeMultiply = 3,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_COLOR_BURN")]
                    BlendModeColorBurn = 4,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LINEAR_BURN")]
                    BlendModeLinearBurn = 5,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DARKER_COLOR")]
                    BlendModeDarkerColor = 6,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LIGHTEN")]
                    BlendModeLighten = 7,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SCREEN")]
                    BlendModeScreen = 8,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_COLOR_DODGE")]
                    BlendModeColorDodge = 9,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LINEAR_DODGE")]
                    BlendModeLinearDodge = 10,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LIGHTER_COLOR")]
                    BlendModeLighterColor = 11,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_OVERLAY")]
                    BlendModeOverlay = 12,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SOFT_LIGHT")]
                    BlendModeSoftLight = 13,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_HARD_LIGHT")]
                    BlendModeHardLight = 14,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_VIVID_LIGHT")]
                    BlendModeVividLight = 15,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LINEAR_LIGHT")]
                    BlendModeLinearLight = 16,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_PIN_LIGHT")]
                    BlendModePinLight = 17,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_HARD_MIX")]
                    BlendModeHardMix = 18,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DIFFERENCE")]
                    BlendModeDifference = 19,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_EXCLUSION")]
                    BlendModeExclusion = 20,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SUBTRACT")]
                    BlendModeSubtract = 21,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DIVIDE")]
                    BlendModeDivide = 22,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_HUE")]
                    BlendModeHue = 23,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SATURATION")]
                    BlendModeSaturation = 24,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_COLOR")]
                    BlendModeColor = 25,
                    [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LUMINOSITY")]
                    BlendModeLuminosity = 26,
                }

            }

            [global::ProtoBuf.ProtoContract()]
            public partial class Matte : global::ProtoBuf.IExtensible
            {
                private global::ProtoBuf.IExtension __pbn__extensionData;
                global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                    => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                [global::ProtoBuf.ProtoMember(1)]
                public Alpha alpha
                {
                    get => __pbn__MatteType.Is(1) ? ((Alpha)__pbn__MatteType.Object) : default;
                    set => __pbn__MatteType = new global::ProtoBuf.DiscriminatedUnionObject(1, value);
                }
                public bool ShouldSerializealpha() => __pbn__MatteType.Is(1);
                public void Resetalpha() => global::ProtoBuf.DiscriminatedUnionObject.Reset(ref __pbn__MatteType, 1);

                private global::ProtoBuf.DiscriminatedUnionObject __pbn__MatteType;

                [global::ProtoBuf.ProtoMember(2)]
                public Luma luma
                {
                    get => __pbn__MatteType.Is(2) ? ((Luma)__pbn__MatteType.Object) : default;
                    set => __pbn__MatteType = new global::ProtoBuf.DiscriminatedUnionObject(2, value);
                }
                public bool ShouldSerializeluma() => __pbn__MatteType.Is(2);
                public void Resetluma() => global::ProtoBuf.DiscriminatedUnionObject.Reset(ref __pbn__MatteType, 2);

                [global::ProtoBuf.ProtoMember(4)]
                public White white
                {
                    get => __pbn__MatteType.Is(4) ? ((White)__pbn__MatteType.Object) : default;
                    set => __pbn__MatteType = new global::ProtoBuf.DiscriminatedUnionObject(4, value);
                }
                public bool ShouldSerializewhite() => __pbn__MatteType.Is(4);
                public void Resetwhite() => global::ProtoBuf.DiscriminatedUnionObject.Reset(ref __pbn__MatteType, 4);

                [global::ProtoBuf.ProtoContract()]
                public partial class Alpha : global::ProtoBuf.IExtensible
                {
                    private global::ProtoBuf.IExtension __pbn__extensionData;
                    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                    [global::ProtoBuf.ProtoMember(1, Name = @"inverted")]
                    public bool Inverted { get; set; }

                }

                [global::ProtoBuf.ProtoContract()]
                public partial class Luma : global::ProtoBuf.IExtensible
                {
                    private global::ProtoBuf.IExtension __pbn__extensionData;
                    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                    [global::ProtoBuf.ProtoMember(1, Name = @"inverted")]
                    public bool Inverted { get; set; }

                }

                [global::ProtoBuf.ProtoContract()]
                public partial class White : global::ProtoBuf.IExtensible
                {
                    private global::ProtoBuf.IExtension __pbn__extensionData;
                    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

                }

            }

        }

        [global::ProtoBuf.ProtoContract()]
        public enum BlendMode
        {
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_NORMAL")]
            BlendModeNormal = 0,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DISSOLVE")]
            BlendModeDissolve = 1,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DARKEN")]
            BlendModeDarken = 2,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_MULTIPLY")]
            BlendModeMultiply = 3,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_COLOR_BURN")]
            BlendModeColorBurn = 4,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LINEAR_BURN")]
            BlendModeLinearBurn = 5,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DARKER_COLOR")]
            BlendModeDarkerColor = 6,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LIGHTEN")]
            BlendModeLighten = 7,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SCREEN")]
            BlendModeScreen = 8,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_COLOR_DODGE")]
            BlendModeColorDodge = 9,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LINEAR_DODGE")]
            BlendModeLinearDodge = 10,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LIGHTER_COLOR")]
            BlendModeLighterColor = 11,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_OVERLAY")]
            BlendModeOverlay = 12,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SOFT_LIGHT")]
            BlendModeSoftLight = 13,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_HARD_LIGHT")]
            BlendModeHardLight = 14,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_VIVID_LIGHT")]
            BlendModeVividLight = 15,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LINEAR_LIGHT")]
            BlendModeLinearLight = 16,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_PIN_LIGHT")]
            BlendModePinLight = 17,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_HARD_MIX")]
            BlendModeHardMix = 18,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DIFFERENCE")]
            BlendModeDifference = 19,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_EXCLUSION")]
            BlendModeExclusion = 20,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SUBTRACT")]
            BlendModeSubtract = 21,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_DIVIDE")]
            BlendModeDivide = 22,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_HUE")]
            BlendModeHue = 23,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_SATURATION")]
            BlendModeSaturation = 24,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_COLOR")]
            BlendModeColor = 25,
            [global::ProtoBuf.ProtoEnum(Name = @"BLEND_MODE_LUMINOSITY")]
            BlendModeLuminosity = 26,
        }

    }

}


#endregion
